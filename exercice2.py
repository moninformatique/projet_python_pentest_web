#!/usr/bin/python3
#coding:utf-8

# Import des modules
import requests
import threading
import argparse


parser = argparse.ArgumentParser(description="Pen test : Top 10 OWASP 2021 WebApp")
parser.add_argument("--url", help="URL de l'application web", required=True)
args = parser.parse_args()

# Fonction pour tester A01: Absence de gestion de l'authentification
def test_owasp_a01_vulnerability(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print("A01 : DETECTEE : La page est accessible sans authentification.")
        else:
            print("A01 : NON DETECTEE : La page nécessite une authentification.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A02: Communication non sécurisée
def test_owasp_a02_vulnerability(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            if response.url.startswith("https://"):
                print("A02 : NON DETECTEE : La connexion est sécurisée.")
            else:
                print("A02 : DETECTEE : La connexion n'est pas sécurisée. Vulnérabilité A02 détectée.")
        else:
            print("A02 : NON DETECTEE : La page nécessite une authentification ou a renvoyé un code différent de 200.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A03: Injection SQL
def test_owasp_a03_vulnerability(url):
    try:
        response = requests.get(url)
        if "SQL error" in response.text:
            print("A03 : DETECTEE : Injection SQL détectée.")
        else:
            print("A03 : NON DETECTEE : Injection SQL non détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A04: Conception non sécurisée
def test_owasp_a04_vulnerability(url):
    try:
        response = requests.get(url)
        if "mot_de_passe" in response.text:
            print("A04 : DETECTEE : Conception non sécurisée détectée.")
        else:
            print("A04 : NON DETECTEE : Conception non sécurisée non détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A05: Mauvaise configuration de sécurité
def test_owasp_a05_vulnerability(url):
    try:
        response = requests.get(url + '/admin/config.xml')
        if response.status_code == 200:
            print("A05 : DETECTEE : Mauvaise configuration de sécurité détectée.")
        else:
            print("A05 : NON DETECTEE : Mauvaise configuration de sécurité non détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A06: Composants vulnérables et obsolètes
def test_owasp_a06_vulnerability(url):
    try:
        response = requests.get(url)
        if "ObsoleteComponent" in response.text:
            print("A06 : DETECTEE : Composants vulnérables et obsolètes détectée.")
        else:
            print("A06 : NON DETECTEE : Composants vulnérables et obsolètes non détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A07: Identification et authentification de mauvaise qualité
def test_owasp_a07_vulnerability(url):
    try:
        login_url = url + "/login"
        login_data = {"username": "utilisateur", "password": ""}
        response = requests.post(login_url, data=login_data)
        if "Mauvais nom d'utilisateur ou mot de passe" in response.text:
            print("A07 : DETECTEE : Identification et authentification de mauvaise qualité détectée.")
        else:
            print("A07 : NON DETECTEE : Identification et authentification de mauvaise qualité non détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A08: Manque d'intégrité des données et du logiciel
def test_owasp_a08_vulnerability(url):
    try:
        response = requests.get(url)
        if "corrupted data" in response.text:
            print("A08 : DETECTEE : Manque d'intégrité des données et du logiciel détectée.")
        else:
            print("A08 : NON DETECTEE : Manque d'intégrité des données et du logiciel non détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A09: Carence des systèmes de contrôle et de journalisation
def test_owasp_a09_vulnerability(url):
    try:
        response = requests.get(url)
        if 'access.log' in response.text:
            print("A09 : DETECTEE : Carence des systèmes de contrôle et de journalisation est détectée.")
        else:
            print("A09 : NON DETECTEE : Carence des systèmes de contrôle et de journalisation n'est pas détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

# Fonction pour tester A10: Falsification de requête côté serveur
def test_owasp_a10_vulnerability(url):
    try:
        response = requests.get(url)
        if "Server Request Forgery detected" in response.text:
            print("A10 : DETECTEE : Falsification de requête côté serveur détectée.")
        else:
            print("A10 : NON DETECTEE : Falsification de requête côté serveur non détectée.")
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la demande :", e)

if __name__ == "__main__":
    target_url = args.url
    
    #target_url = "http://ns.test.lab:8000/WebGoat/login"
    
    print("Vulnérabilité : Détection : Commentaire")

    threads = []

    # Création des threads pour exécuter les tests de vulnérabilité en parallèle
    threads.append(threading.Thread(target=test_owasp_a01_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a02_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a03_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a04_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a05_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a06_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a07_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a08_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a09_vulnerability, args=(target_url,)))
    threads.append(threading.Thread(target=test_owasp_a10_vulnerability, args=(target_url,)))

    # Démarrage des threads
    for thread in threads:
        thread.start()

    # Attente de la fin de tous les threads
    for thread in threads:
        thread.join()